{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createToolbarAndroidComponent;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"./react-native\");\n\nvar _jsxFileName = \"/home/travis/build/oblador/react-native-vector-icons/lib/toolbar-android.js\";\nvar ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nvar LOGO_ICON_PROP_NAMES = ICON_PROP_NAMES.concat(['logoName']);\nvar NAV_ICON_PROP_NAMES = ICON_PROP_NAMES.concat(['navIconName']);\nvar OVERFLOW_ICON_PROP_NAMES = ICON_PROP_NAMES.concat(['overflowIconName']);\nvar ACTIONS_PROP_NAMES = ICON_PROP_NAMES.concat(['actions']);\n\nvar arePropsEqual = function arePropsEqual(keys) {\n  return function (prevProps, nextProps) {\n    return (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys));\n  };\n};\n\nvar areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nvar areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nvar areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nvar areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nfunction createToolbarAndroidComponent(IconNamePropType, getImageSource) {\n  var _class, _temp;\n\n  return _temp = _class = function (_PureComponent) {\n    (0, _inherits2.default)(IconToolbarAndroid, _PureComponent);\n\n    function IconToolbarAndroid() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      (0, _classCallCheck2.default)(this, IconToolbarAndroid);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(IconToolbarAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        logo: undefined,\n        navIcon: undefined,\n        overflowIcon: undefined,\n        actions: undefined\n      };\n      return _this;\n    }\n\n    (0, _createClass2.default)(IconToolbarAndroid, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.updateLogoIconSource();\n        this.updateNavIconSource();\n        this.updateOverflowIconSource();\n        this.updateActionIconSources();\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        if (!areLogoIconPropsEqual(prevProps, this.props)) {\n          this.updateLogoIconSource();\n        }\n\n        if (!areNavIconPropsEqual(prevProps, this.props)) {\n          this.updateNavIconSource();\n        }\n\n        if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n          this.updateOverflowIconSource();\n        }\n\n        if (!areActionPropsEqual(prevProps, this.props)) {\n          this.updateActionIconSources();\n        }\n      }\n    }, {\n      key: \"updateLogoIconSource\",\n      value: function updateLogoIconSource() {\n        var _this$props, logoName, iconSize, iconColor, titleColor, logo;\n\n        return _regenerator.default.async(function updateLogoIconSource$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, logoName = _this$props.logoName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor, titleColor = _this$props.titleColor;\n\n                if (!logoName) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regenerator.default.awrap(getImageSource(logoName, iconSize, iconColor || titleColor));\n\n              case 4:\n                logo = _context.sent;\n                this.setState({\n                  logo: logo\n                });\n                _context.next = 9;\n                break;\n\n              case 8:\n                if (this.state.logo) {\n                  this.setState({\n                    logo: undefined\n                  });\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"updateNavIconSource\",\n      value: function updateNavIconSource() {\n        var _this$props2, navIconName, iconSize, iconColor, titleColor, navIcon;\n\n        return _regenerator.default.async(function updateNavIconSource$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props2 = this.props, navIconName = _this$props2.navIconName, iconSize = _this$props2.iconSize, iconColor = _this$props2.iconColor, titleColor = _this$props2.titleColor;\n\n                if (!navIconName) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 4;\n                return _regenerator.default.awrap(getImageSource(navIconName, iconSize, iconColor || titleColor));\n\n              case 4:\n                navIcon = _context2.sent;\n                this.setState({\n                  navIcon: navIcon\n                });\n                _context2.next = 9;\n                break;\n\n              case 8:\n                if (this.state.navIcon) {\n                  this.setState({\n                    navIcon: undefined\n                  });\n                }\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"updateOverflowIconSource\",\n      value: function updateOverflowIconSource() {\n        var _this$props3, overflowIconName, iconSize, iconColor, titleColor, overflowIcon;\n\n        return _regenerator.default.async(function updateOverflowIconSource$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props3 = this.props, overflowIconName = _this$props3.overflowIconName, iconSize = _this$props3.iconSize, iconColor = _this$props3.iconColor, titleColor = _this$props3.titleColor;\n\n                if (!overflowIconName) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 4;\n                return _regenerator.default.awrap(getImageSource(overflowIconName, iconSize, iconColor || titleColor));\n\n              case 4:\n                overflowIcon = _context3.sent;\n                this.setState({\n                  overflowIcon: overflowIcon\n                });\n                _context3.next = 9;\n                break;\n\n              case 8:\n                if (this.state.overflowIcon) {\n                  this.setState({\n                    overflowIcon: undefined\n                  });\n                }\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"updateActionIconSources\",\n      value: function updateActionIconSources() {\n        var _this$props4, actions, iconSize, iconColor, titleColor, updatedActions;\n\n        return _regenerator.default.async(function updateActionIconSources$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this$props4 = this.props, actions = _this$props4.actions, iconSize = _this$props4.iconSize, iconColor = _this$props4.iconColor, titleColor = _this$props4.titleColor;\n                _context4.next = 3;\n                return _regenerator.default.awrap(Promise.all((actions || []).map(function (action) {\n                  if (action.iconName) {\n                    return getImageSource(action.iconName, action.iconSize || iconSize, action.iconColor || iconColor || titleColor).then(function (icon) {\n                      return (0, _objectSpread2.default)({}, action, {\n                        icon: icon\n                      });\n                    });\n                  }\n\n                  return Promise.resolve(action);\n                })));\n\n              case 3:\n                updatedActions = _context4.sent;\n                this.setState({\n                  actions: updatedActions\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return _react.default.createElement(_reactNative.ToolbarAndroid, (0, _extends2.default)({}, this.props, this.state, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          }\n        }));\n      }\n    }]);\n    return IconToolbarAndroid;\n  }(_react.PureComponent), _class.propTypes = {\n    logoName: IconNamePropType,\n    navIconName: IconNamePropType,\n    overflowIconName: IconNamePropType,\n    actions: _propTypes.default.arrayOf(_propTypes.default.shape({\n      title: _propTypes.default.string.isRequired,\n      iconName: IconNamePropType,\n      iconSize: _propTypes.default.number,\n      iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n      show: _propTypes.default.oneOf(['always', 'ifRoom', 'never']),\n      showWithText: _propTypes.default.bool\n    })),\n    iconSize: _propTypes.default.number,\n    iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n    titleColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])\n  }, _class.defaultProps = {\n    iconSize: 24\n  }, _temp;\n}","map":null,"metadata":{},"sourceType":"script"}