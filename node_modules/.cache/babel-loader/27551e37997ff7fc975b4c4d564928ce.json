{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createTabBarItemIOSComponent;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"./react-native\");\n\nvar _jsxFileName = \"/home/travis/build/oblador/react-native-vector-icons/lib/tab-bar-item-ios.js\";\nvar ICON_PROP_NAMES = ['iconName', 'iconSize', 'iconColor'];\nvar SELECTED_ICON_PROP_NAMES = ICON_PROP_NAMES.concat(['selectedIconName', 'selectedIconColor']);\n\nvar arePropsEqual = function arePropsEqual(keys) {\n  return function (prevProps, nextProps) {\n    return (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys));\n  };\n};\n\nvar areIconPropsEqual = arePropsEqual(ICON_PROP_NAMES);\nvar areSelectedIconPropsEqual = arePropsEqual(SELECTED_ICON_PROP_NAMES);\n\nfunction createTabBarItemIOSComponent(IconNamePropType, getImageSource) {\n  var _class, _temp;\n\n  return _temp = _class = function (_PureComponent) {\n    (0, _inherits2.default)(TabBarItemIOS, _PureComponent);\n\n    function TabBarItemIOS() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      (0, _classCallCheck2.default)(this, TabBarItemIOS);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabBarItemIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        icon: undefined,\n        selectedIcon: undefined\n      };\n      return _this;\n    }\n\n    (0, _createClass2.default)(TabBarItemIOS, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.updateIconSource();\n        this.updateSelectedIconSource();\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        if (!areIconPropsEqual(prevProps, this.props)) {\n          this.updateIconSource();\n        }\n\n        if (!areSelectedIconPropsEqual(prevProps, this.props)) {\n          this.updateSelectedIconSource();\n        }\n      }\n    }, {\n      key: \"updateIconSource\",\n      value: function updateIconSource() {\n        var _this$props, iconName, iconSize, iconColor, icon;\n\n        return _regenerator.default.async(function updateIconSource$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, iconName = _this$props.iconName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor;\n\n                if (!iconName) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regenerator.default.awrap(getImageSource(iconName, iconSize, iconColor));\n\n              case 4:\n                icon = _context.sent;\n                this.setState({\n                  icon: icon\n                });\n                _context.next = 9;\n                break;\n\n              case 8:\n                if (this.state.icon) {\n                  this.setState({\n                    icon: undefined\n                  });\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"updateSelectedIconSource\",\n      value: function updateSelectedIconSource() {\n        var _this$props2, iconName, iconColor, iconSize, selectedIconName, selectedIconColor, selectedIcon;\n\n        return _regenerator.default.async(function updateSelectedIconSource$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props2 = this.props, iconName = _this$props2.iconName, iconColor = _this$props2.iconColor, iconSize = _this$props2.iconSize, selectedIconName = _this$props2.selectedIconName, selectedIconColor = _this$props2.selectedIconColor;\n\n                if (!(selectedIconName || selectedIconColor)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 4;\n                return _regenerator.default.awrap(getImageSource(selectedIconName || iconName, iconSize, selectedIconColor || iconColor));\n\n              case 4:\n                selectedIcon = _context2.sent;\n                this.setState({\n                  selectedIcon: selectedIcon\n                });\n                _context2.next = 9;\n                break;\n\n              case 8:\n                if (this.state.selectedIcon) {\n                  this.setState({\n                    selectedIcon: undefined\n                  });\n                }\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return _react.default.createElement(_reactNative.TabBarIOS.Item, (0, _extends2.default)({}, this.state, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          }\n        }));\n      }\n    }]);\n    return TabBarItemIOS;\n  }(_react.PureComponent), _class.propTypes = {\n    iconName: IconNamePropType.isRequired,\n    selectedIconName: IconNamePropType,\n    iconSize: _propTypes.default.number,\n    iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n    selectedIconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])\n  }, _class.defaultProps = {\n    iconSize: 30\n  }, _temp;\n}","map":null,"metadata":{},"sourceType":"script"}